var tipuesearch = {"pages":[{"title":"Changelog","text":"  All notable changes to this project will be documented in this file.  The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.  [Unreleased]   lorem   [N.N.N] - YYYY-MM-DD  Added   lorem   Changed   lorem   Deprecated   lorem   Removed   lorem   Fixed   lorem   Security   lorem  ","tags":"","url":"CHANGELOG.html"},{"title":"Live Dev Porter","text":"    Summary  Simplifies the management and transfer of assets between website environments.  Visit https:\/\/aklump.github.io\/live_dev_porter for full documentation.  Quick Start   Install in your repository root using cloudy pm-install aklump\/live_dev_porter Open .live_dev_porter\/config.yml and modify as needed. Open .live_dev_porter\/config.local.yml and ...; be sure to ignore this file in SCM. Try it out with .\/bin\/live_dev_porter SOME_COMMAND   Requirements  You must have Cloudy installed on your system to install this package.  Installation  The installation script above will generate the following structure where . is your repository root.  . \u251c\u2500\u2500 .live_dev_porter \u2502   \u251c\u2500\u2500 backups \u2502   \u2502\u00a0\u00a0 \u2514\u2500\u2500 dev \u2502   \u2502\u00a0\u00a0     \u2514\u2500\u2500 db \u2502   \u2502\u00a0\u00a0         \u251c\u2500\u2500 data_exclusions.txt \u2502   \u2502\u00a0\u00a0         \u2514\u2500\u2500 table_exclusions.txt \u2502   \u251c\u2500\u2500 config.local.yml \u2502   \u251c\u2500\u2500 config.yml \u2502   \u2514\u2500\u2500 fetch \u2502       \u2514\u2500\u2500 live \u2502           \u251c\u2500\u2500 db \u2502           \u2514\u2500\u2500 files \u2502               \u2514\u2500\u2500 *.ignore.txt \u251c\u2500\u2500 bin \u2502\u00a0\u00a0 \u251c\u2500\u2500 live_dev_porter -&gt; ..\/opt\/live_dev_porter\/live_dev_porter.sh \u251c\u2500\u2500 opt \u2502   \u251c\u2500\u2500 cloudy \u2502   \u2514\u2500\u2500 aklump \u2502       \u2514\u2500\u2500 live_dev_porter \u2514\u2500\u2500 {public web root}   To Update   Update to the latest version from your repo root: cloudy pm-update aklump\/live_dev_porter   Configuration Files  Refer to the file(s) for documentation about configuration options.       Filename   Description   VCS       .live_dev_porter\/config.yml   Configuration shared across all server environments: prod, staging, dev   yes     .live_dev_porter\/config.local.yml   Configuration overrides for a single environment; not version controlled.   no     Usage   To see all commands use .\/bin\/live_dev_porter   Contributing  If you find this project useful... please consider making a donation. ","tags":"","url":"README.html"},{"title":"Ignore tables altogether","text":"   List the tablenames, one per line in tables.ignore.txt You may use SQL wildcards such as foo_% in your list. Neither the structure, nor the data will appear in the export file.   Ignore data only   List the tablenames, one per line in data.ignore.txt You may use SQL wildcards such as cache_% in your list. The export file will contain structure only.  ","tags":"","url":"export.html"},{"title":"Files","text":"  File sync uses one or more file \"groups\", e.g. files_sync.public.  If the local and remote paths are the same then do like this:  files_sync:   public:     - web\/sites\/default\/files   If the local and remote paths are different then use this pattern LOCAL:REMOTE, e.g.,  files_sync:   public:     - web\/sites\/default\/files:\/files  ","tags":"","url":"files.html"},{"title":"Plugins","text":"   Plugins are folders saved to the plugins\/ directory, resembling the following structure. \u2514\u2500\u2500 pantheon     \u251c\u2500\u2500 README.md     \u251c\u2500\u2500 config.yml     \u2514\u2500\u2500 plugin.sh config.yml should all configuration that the plugin is expecting to use.   plugin.sh should contain functions; all that are public must be prefixed by the plugin name: bash function pantheon_init() {  ensure_files_sync_local_directories &amp;&amp; succeed_because \"Updated fetch structure at $(path_unresolve \"$APP_ROOT\" \"$FETCH_FILES_PATH\")\" }  Plugins may provide the following functions:   ${PLUGIN}_init ${PLUGIN}_authenticate ${PLUGIN}_remote_clear_cache ${PLUGIN}_fetch ${PLUGIN}_reset ${PLUGIN}_on_clear_cache Plugins may define private functions, but they should begin with an underscore. bash function _get_remote_env() {  case $REMOTE_ENV_ID in  production)    echo 'live' &amp;&amp; return 0    ;;  staging)    echo 'test' &amp;&amp; return 0    ;;  esac  exit_with_failure \"Cannot determine Pantheon environment using $REMOTE_ENV_ID\" }    Error Conditions   Plugins should use fail_because &amp;&amp; succeed_because Plugins should return non-zeros Plugins should not use exit_with_* methods; those are for the controller.   Tests  Add tests to your plugin:   Create PLUGIN.tests.sh, e.g. \"default.tests.sh\" Follow the Cloudy testing framework. Run tests with .\/live_dev_porter tests  ","tags":"","url":"plugins.html"},{"title":"Search Results","text":" ","tags":"","url":"search--results.html"}]};
